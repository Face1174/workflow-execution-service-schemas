
syntax = "proto3";

package ga4gh_workflow_exec;

// Import HTTP RESTful annotations
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "task_execution.proto";

enum WorkflowType {
    UNKNOWN = 0;
    CWL = 1;
    WDL = 2;
}

message WorkflowRequest {
  string workflow_params = 1;
  string workflow_descriptor = 2;
  WorkflowType workflow_type = 3;
  string workflow_version = 4;
}

message WorkflowRunID {
  string workflow_ID = 1;
}

message WorkflowStatus {
  string workflow_ID = 1;
  map<string,string> metadata = 2;
  ga4gh_task_exec.State state = 3;
  repeated ga4gh_task_exec.JobLog logs = 4;
  repeated ga4gh_task_exec.TaskParameter outputs = 5;
}

message Job {
  string jobID = 1;
  map<string,string> metadata = 2;
  ga4gh_task_exec.Task task = 3;
  ga4gh_task_exec.State state = 4;
  repeated ga4gh_task_exec.JobLog logs = 5;
}

message WorkflowLog {
  WorkflowRequest request = 1;
  map<string, ga4gh_task_exec.JobLog> logs = 2;
}

//Web service to get, create, list and delete Workflows
service WorkflowService {

  //Run a workflow
  rpc RunWorkflow(WorkflowRequest) returns (WorkflowRunID) {
    option (google.api.http) = {
      post: "/v1/workflows"
      body: "*"
    };
  }

  //Get quick status info about a running workflow
  rpc GetWorkflowStatus(WorkflowRunID) returns (WorkflowStatus) {
      option (google.api.http) = {
        get: "/v1/workflows/{workflow_ID}/status"
      };
  }

  //Get detailed info about a running workflow
  rpc GetWorkflowLog(WorkflowRunID) returns (WorkflowLog) {
      option (google.api.http) = {
        get: "/v1/workflows/{workflow_ID}"
      };
  }


  //Cancel a running workflow
  rpc CancelJob(WorkflowRunID) returns (WorkflowRunID) {
    option (google.api.http) = {
      delete: "/v1/workflows/{workflow_ID}"
    };
  }

}
