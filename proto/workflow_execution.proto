
syntax = "proto3";

package ga4gh_workflow_exec;

// Import HTTP RESTful annotations
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "task_execution.proto";

//Return envelope for workflow listing
message WorkflowListResponse {
   repeated WorkflowDesc workflows = 1;
   string next_page_token = 2;
}

//Request listing of jobs tracked by server
message WorkflowListRequest {
  //OPTIONAL
  //For each key, if the key's value is empty string then match workflows that are tagged with this key regardless of value.  If the key's value is defined, then match workflows that are tagged with this key and also whose value is prefixed with that value string.  You may need to make multiple requests if you need to search for multiple values on the same key.
  map<string,string> key_value_search = 1;
  //OPTIONAL
  //Number of workflows to return at once. Defaults to 256, and max is 2048.
  uint32 page_size = 2;
  //OPTIONAL
  //Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
  string page_token = 3;
}

//Small description of workflows, returned by server during listing
message WorkflowDesc {
  //REQUIRED
  string workflow_id  = 1;
  //REQUIRED
  ga4gh_task_exec.State state = 2;
}

//workflow request object
message WorkflowRequest {
  //REQUIRED
  //the workflow CWL or WDL document
  string workflow_descriptor = 1;
  //REQUIRED
  //the workflow parameterization document (typically a JSON file)
  string workflow_params = 2;
  //REQUIRED
  //the workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance)
  string workflow_type = 3;
  //REQUIRED
  //the workflow descriptor type version, must be one supported by this WES instance
  string workflow_type_version = 4;
  //OPTIONAL
  //a key-value map of arbitrary metadata outside the scope of the workflow_params but useful to track with this workflow request
  map<string,string> key_values = 5;
}

//Blank request message for service request
message ServiceInfoRequest {}

//available workflow types supported by this WES
message WorkflowTypeVersion {
    //an array of one or more version strings
    repeated string workflow_type_version = 1;
}

//Information about Workflow Execution Service
//May include information related (but not limited to)
//the workflow descriptor formats and versions supported and WES API supported.
message ServiceInfo {
  //A map with keys as the workflow format type name (currently only CWL and WDL are used) and value is a WorkflowTypeVersion object which simply contains an array of one or more version strings
  map<string, WorkflowTypeVersion> workflow_type_versions = 1;
  //The version(s) of the WES schema supported by this service
  repeated string supported_wes_versions = 2;
  //The engine(s) used by this WES service, key is engine name e.g. Cromwell and value is version
  map<string,string> engine_versions = 3;
  //a key-value map of arbitrary, extended metadata outside the scope of the above but useful to report back
  map<string,string> key_values = 4;
}

message WorkflowRunID {
  //workflow ID
  string workflow_id = 1;
}

message WorkflowStatus {
  //workflow ID
  string workflow_id = 1;
  //state
  ga4gh_task_exec.State state = 2;
}

message WorkflowLog {
  //workflow ID
  string workflow_id = 1;
  //the original request object
  WorkflowRequest request = 2;
  //state
  ga4gh_task_exec.State state = 3;
  //the logs, and other key info like timing and exit code, for the overall run of this workflow
  repeated ga4gh_task_exec.JobLog logs = 4;
  //the outputs
  repeated ga4gh_task_exec.TaskParameter outputs = 5;
}

//Web service to get, create, list and delete Workflows
service WorkflowService {

  //Get Service Info
  rpc GetServiceInfo(ServiceInfoRequest) returns (ServiceInfo) {
    option (google.api.http) = {
      get: "/v1/workflows-service"
    };
  }

  //Run a workflow
  rpc RunWorkflow(WorkflowRequest) returns (WorkflowRunID) {
    option (google.api.http) = {
      post: "/v1/workflows"
      body: "*"
    };
  }

  //Get quick status info about a running workflow
  rpc GetWorkflowStatus(WorkflowRunID) returns (WorkflowStatus) {
      option (google.api.http) = {
        get: "/v1/workflows/{workflow_id}/status"
      };
  }

  //Get detailed info about a running workflow
  rpc GetWorkflowLog(WorkflowRunID) returns (WorkflowLog) {
      option (google.api.http) = {
        get: "/v1/workflows/{workflow_id}"
      };
  }

  //Cancel a running workflow
  rpc CancelJob(WorkflowRunID) returns (WorkflowRunID) {
    option (google.api.http) = {
      delete: "/v1/workflows/{workflow_id}"
    };
  }

  //List the workflows
  rpc ListWorkflows(WorkflowListRequest) returns (WorkflowListResponse) {
    option (google.api.http) = {
      get: "/v1/workflows"
    };
  }

}
